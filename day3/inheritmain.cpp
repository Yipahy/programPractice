/*
虚继承可以解决菱形继承的二义性问题

多态的实现：继承，重写父类虚函数，父类指针指向子类对象(注意将父类析构函数变为虚函数)

虚函数原理：
1、类中声明虚函数时，编译器会为该类建立虚函数表（表项为虚函数入口地址）
2、实例化子类对象时，编译器会在构造函数中添加从父类继承的虚函数表及其指针
3、若子类重写了父类虚函数，则覆盖虚函数表中重写的虚函数
4、因此，当指向子类对象的父类指针调用虚函数时，调用的是子类重写的虚函数

纯虚函数：在虚函数声明后加=0，没有韩式实现

抽象类：类中存在纯虚函数，子类必须实现抽象类的所有纯虚函数，否则也会变为抽象类

*/
#include "inherit.h"

int main()
{
	Son s;
	s.a=20;
	s.b=30;
	s.c=40;
	s.d=50;
	std::cout<<s.a<<" "<<s.b<<" "<<s.c<<" "<<s.d<<std::endl;

	Animal* am=new Dog;
	am->speak();

	Eagle ea;
	ea.func();
	delete am;
	return 0;
}
